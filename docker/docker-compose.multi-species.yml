# Multi-Species Galaxy with AI-Driven NPCs
# Supports intelligent NPCs at every level with voice-driven interactions
version: '3.8'

networks:
  startales-multispecies:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16

volumes:
  postgres-data:
  postgres-ai-data:
  postgres-npc-data:
  postgres-species-data:
  redis-realtime-data:
  redis-ai-cache-data:
  redis-npc-data:
  kafka-data:
  clickhouse-data:
  minio-data:
  prometheus-data:
  grafana-data:

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
      - "3478:3478/udp"  # STUN/TURN for WebRTC
    volumes:
      - ./docker/nginx/nginx-multispecies.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - voice-processing
    networks:
      - startales-multispecies
    restart: unless-stopped

  # Core Services
  api-gateway:
    build:
      context: .
      dockerfile: docker/services/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - AI_EMPIRE_SERVICE_URL=http://ai-empire-management:3030
      - NPC_SERVICE_URL=http://npc-character-service:3031
      - SPECIES_SERVICE_URL=http://species-culture-service:3032
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis-realtime
      - kafka
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Enhanced Voice Processing Service (Multi-Species)
  voice-processing:
    build:
      context: .
      dockerfile: docker/services/voice-processing/Dockerfile
    ports:
      - "3020:3020"
      - "8080:8080"  # WebRTC signaling
    environment:
      - NODE_ENV=production
      - PORT=3020
      - WEBRTC_PORT=8080
      - REDIS_URL=redis://redis-ai-cache:6379
      - KAFKA_BROKERS=kafka:9092
      - SPECIES_SERVICE_URL=http://species-culture-service:3032
      - STT_PROVIDER=whisper
      - TTS_PROVIDER=elevenlabs
      - NLU_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
      - VOICE_LATENCY_TARGET=200
      - MAX_CONCURRENT_STREAMS=2000
      - ENABLE_SPECIES_VOICES=true
      - ENABLE_PERSONALITY_SYNTHESIS=true
    depends_on:
      - redis-ai-cache
      - kafka
      - species-culture-service
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 12
      resources:
        limits:
          cpus: '3.0'
          memory: 6G

  # AI Empire Management Service (New)
  ai-empire-management:
    build:
      context: .
      dockerfile: docker/services/ai-empire-management/Dockerfile
    ports:
      - "3030:3030"
    environment:
      - NODE_ENV=production
      - PORT=3030
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-ai:5432/startales_ai_empires
      - REDIS_URL=redis://redis-ai-cache:6379
      - KAFKA_BROKERS=kafka:9092
      - SPECIES_SERVICE_URL=http://species-culture-service:3032
      - BEHAVIOR_ENGINE_URL=http://ai-behavior-engine:3033
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AI_DECISION_FREQUENCY=1  # 1Hz strategic decisions
      - ENABLE_MULTI_EMPIRE_COORDINATION=true
      - ENABLE_PLAYER_BEHAVIOR_LEARNING=true
      - MAX_CONCURRENT_EMPIRES=50
    depends_on:
      - postgres-ai
      - redis-ai-cache
      - kafka
      - species-culture-service
      - ai-behavior-engine
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '3.0'
          memory: 6G

  # NPC Character Service (New)
  npc-character-service:
    build:
      context: .
      dockerfile: docker/services/npc-character-service/Dockerfile
    ports:
      - "3031:3031"
    environment:
      - NODE_ENV=production
      - PORT=3031
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-npc:5432/startales_npcs
      - REDIS_URL=redis://redis-npc:6379
      - KAFKA_BROKERS=kafka:9092
      - SPECIES_SERVICE_URL=http://species-culture-service:3032
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - BEHAVIOR_ENGINE_URL=http://ai-behavior-engine:3033
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MAX_NPCS_PER_SYSTEM=100
      - PERSONALITY_UPDATE_FREQUENCY=0.1  # Every 10 seconds
      - ENABLE_DYNAMIC_DIALOGUE=true
      - ENABLE_RELATIONSHIP_EVOLUTION=true
      - ENABLE_QUEST_GENERATION=true
    depends_on:
      - postgres-npc
      - redis-npc
      - kafka
      - species-culture-service
      - voice-processing
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Species & Culture Service (New)
  species-culture-service:
    build:
      context: .
      dockerfile: docker/services/species-culture-service/Dockerfile
    ports:
      - "3032:3032"
    environment:
      - NODE_ENV=production
      - PORT=3032
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-species:5432/startales_species
      - REDIS_URL=redis://redis-ai-cache:6379
      - KAFKA_BROKERS=kafka:9092
      - ENABLE_CULTURAL_EVOLUTION=true
      - ENABLE_INTER_SPECIES_RELATIONSHIPS=true
      - ENABLE_LANGUAGE_PATTERNS=true
      - CULTURAL_DRIFT_RATE=0.01
      - RELATIONSHIP_UPDATE_FREQUENCY=1  # 1Hz
    depends_on:
      - postgres-species
      - redis-ai-cache
      - kafka
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3G

  # AI Behavior Engine (New)
  ai-behavior-engine:
    build:
      context: .
      dockerfile: docker/services/ai-behavior-engine/Dockerfile
    ports:
      - "3033:3033"
    environment:
      - NODE_ENV=production
      - PORT=3033
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-ai:5432/startales_ai_behavior
      - REDIS_URL=redis://redis-ai-cache:6379
      - KAFKA_BROKERS=kafka:9092
      - BEHAVIOR_TREE_UPDATE_FREQUENCY=10  # 10Hz tactical decisions
      - STRATEGIC_PLANNING_FREQUENCY=1  # 1Hz strategic decisions
      - LEARNING_UPDATE_FREQUENCY=0.1  # Every 10 seconds
      - ENABLE_MULTI_AGENT_COORDINATION=true
      - ENABLE_ADAPTIVE_LEARNING=true
      - MAX_BEHAVIOR_TREES=1000
    depends_on:
      - postgres-ai
      - redis-ai-cache
      - kafka
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 8
      resources:
        limits:
          cpus: '4.0'
          memory: 8G

  # Enhanced Simulation Engine (Multi-Species)
  simulation-engine:
    build:
      context: .
      dockerfile: docker/services/simulation-engine/Dockerfile
    ports:
      - "3021:3021"
    environment:
      - NODE_ENV=production
      - PORT=3021
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_simulation
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - AI_EMPIRE_SERVICE_URL=http://ai-empire-management:3030
      - NPC_SERVICE_URL=http://npc-character-service:3031
      - SPECIES_SERVICE_URL=http://species-culture-service:3032
      - SIMULATION_FREQUENCY=10  # 10Hz tick rate
      - OFFLINE_ACCELERATION=60  # 60x speed when no players
      - ENABLE_MULTI_SPECIES_SIMULATION=true
      - ENABLE_AI_EMPIRE_ACTIONS=true
      - ENABLE_NPC_INTERACTIONS=true
      - MAX_CONCURRENT_SPECIES=8
    depends_on:
      - postgres
      - redis-realtime
      - kafka
      - ai-empire-management
      - npc-character-service
      - species-culture-service
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '4.0'
          memory: 8G

  # Enhanced Diplomatic Service (Multi-Species)
  diplomatic-service:
    build:
      context: .
      dockerfile: docker/services/diplomatic/Dockerfile
    ports:
      - "3015:3015"
    environment:
      - NODE_ENV=production
      - PORT=3015
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_diplomacy
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - SPECIES_SERVICE_URL=http://species-culture-service:3032
      - AI_EMPIRE_SERVICE_URL=http://ai-empire-management:3030
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENABLE_MULTI_SPECIES_DIPLOMACY=true
      - ENABLE_CULTURAL_NEGOTIATIONS=true
      - ENABLE_AI_EMPIRE_DIPLOMACY=true
      - ENABLE_TRANSLATION_BARRIERS=true
      - CULTURAL_MISUNDERSTANDING_RATE=0.05
    depends_on:
      - postgres
      - redis-realtime
      - kafka
      - species-culture-service
      - ai-empire-management
      - voice-processing
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 6
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  # Enhanced Military Service (Multi-Species)
  military-service:
    build:
      context: .
      dockerfile: docker/services/military/Dockerfile
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_military
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - SPECIES_SERVICE_URL=http://species-culture-service:3032
      - AI_EMPIRE_SERVICE_URL=http://ai-empire-management:3030
      - BEHAVIOR_ENGINE_URL=http://ai-behavior-engine:3033
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - ENABLE_SPECIES_MILITARY_BONUSES=true
      - ENABLE_AI_EMPIRE_TACTICS=true
      - ENABLE_MULTI_SPECIES_BATTLES=true
      - ENABLE_ADAPTIVE_AI_TACTICS=true
      - COMBAT_UPDATE_FREQUENCY=10  # 10Hz during battles
    depends_on:
      - postgres
      - redis-realtime
      - kafka
      - species-culture-service
      - ai-empire-management
      - ai-behavior-engine
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      replicas: 15
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=startales_simulation,startales_diplomacy,startales_military
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  postgres-ai:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_ai_empires
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=startales_ai_empires,startales_ai_behavior
    volumes:
      - postgres-ai-data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5433:5432"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  postgres-npc:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_npcs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-npc-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  postgres-species:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_species
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-species-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Redis Services (Specialized for AI)
  redis-realtime:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 8gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-realtime-data:/data
    ports:
      - "6379:6379"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  redis-ai-cache:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 12gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-ai-cache-data:/data
    ports:
      - "6380:6379"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 12G

  redis-npc:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-npc-data:/data
    ports:
      - "6381:6379"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 4G

  # Apache Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - startales-multispecies
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 20
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # ClickHouse for AI Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      - CLICKHOUSE_DB=ai_analytics
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./docker/clickhouse/config-ai-analytics.xml:/etc/clickhouse-server/config.xml
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  # MinIO for Asset Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus-multispecies.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus-multispecies.yml:/etc/prometheus/prometheus-multispecies.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - startales-multispecies
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning-multispecies:/etc/grafana/provisioning
      - ./docker/grafana/dashboards-multispecies:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - startales-multispecies
    restart: unless-stopped
