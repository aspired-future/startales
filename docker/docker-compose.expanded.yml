# Expanded Microservices for Galactic Conquest Game
# Supports military, psychic, AI, and narrative systems
version: '3.8'

networks:
  startales-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres-data:
  postgres-military-data:
  postgres-psychic-data:
  postgres-ai-data:
  postgres-narrative-data:
  redis-data:
  redis-combat-data:
  minio-data:
  prometheus-data:
  grafana-data:
  nats-data:
  clickhouse-data:

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-expanded.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - startales-network
    restart: unless-stopped

  # Core Services
  api-gateway:
    build:
      context: .
      dockerfile: docker/services/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=2000
    depends_on:
      - redis
      - consul
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  realtime-gateway:
    build:
      context: .
      dockerfile: docker/services/realtime-gateway/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - MAX_CONNECTIONS=2000
      - HEARTBEAT_INTERVAL=30000
    depends_on:
      - redis
      - nats
      - consul
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 8
      resources:
        limits:
          cpus: '2.0'
          memory: 1G

  # Enhanced Campaign Service
  campaign-service:
    build:
      context: .
      dockerfile: docker/services/campaign/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_campaigns
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - ENABLE_DIPLOMACY=true
      - ENABLE_TERRITORIES=true
      - ENABLE_ALLIANCES=true
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 8
      resources:
        limits:
          cpus: '1.5'
          memory: 2G

  # New Military Service
  military-service:
    build:
      context: .
      dockerfile: docker/services/military/Dockerfile
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-military:5432/startales_military
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - COMBAT_RESOLUTION_URL=http://combat-resolution:3011
      - MAX_CONCURRENT_BATTLES=100
    depends_on:
      - postgres-military
      - redis
      - nats
      - combat-resolution
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 20
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Combat Resolution Service
  combat-resolution:
    build:
      context: .
      dockerfile: docker/services/combat-resolution/Dockerfile
    ports:
      - "3011:3011"
    environment:
      - NODE_ENV=production
      - PORT=3011
      - REDIS_URL=redis://redis-combat:6379
      - NATS_URL=nats://nats:4222
      - PHYSICS_ENGINE=bullet
      - PARALLEL_PROCESSING=true
      - GPU_ACCELERATION=${GPU_ACCELERATION:-false}
    depends_on:
      - redis-combat
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 30
      resources:
        limits:
          cpus: '4.0'
          memory: 8G

  # Psychic Powers Service
  psychic-service:
    build:
      context: .
      dockerfile: docker/services/psychic/Dockerfile
    ports:
      - "3012:3012"
    environment:
      - NODE_ENV=production
      - PORT=3012
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-psychic:5432/startales_psychic
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - QUANTUM_PROCESSING=true
      - PSI_AMPLIFIER_NETWORK=enabled
    depends_on:
      - postgres-psychic
      - redis
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 12
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  # AI Systems Service
  ai-systems-service:
    build:
      context: .
      dockerfile: docker/services/ai-systems/Dockerfile
    ports:
      - "3013:3013"
    environment:
      - NODE_ENV=production
      - PORT=3013
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-ai:5432/startales_ai
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - OLLAMA_URL=http://ollama:11434
      - AI_CONSCIOUSNESS_SIMULATION=true
      - SWARM_INTELLIGENCE=enabled
    depends_on:
      - postgres-ai
      - redis
      - nats
      - ollama
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 18
      resources:
        limits:
          cpus: '3.0'
          memory: 6G

  # Narrative Engine Service
  narrative-service:
    build:
      context: .
      dockerfile: docker/services/narrative/Dockerfile
    ports:
      - "3014:3014"
    environment:
      - NODE_ENV=production
      - PORT=3014
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-narrative:5432/startales_narrative
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - STORY_GENERATION=advanced
      - PLOT_TWIST_PROBABILITY=0.15
    depends_on:
      - postgres-narrative
      - redis
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 6
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Diplomatic Relations Service
  diplomatic-service:
    build:
      context: .
      dockerfile: docker/services/diplomatic/Dockerfile
    ports:
      - "3015:3015"
    environment:
      - NODE_ENV=production
      - PORT=3015
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_diplomacy
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - TREATY_NEGOTIATION=enabled
      - ESPIONAGE_OPERATIONS=true
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 6
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Character Development Service
  character-service:
    build:
      context: .
      dockerfile: docker/services/character/Dockerfile
    ports:
      - "3016:3016"
    environment:
      - NODE_ENV=production
      - PORT=3016
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_characters
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - SKILL_TREES=advanced
      - RELATIONSHIP_TRACKING=enabled
      - LEGACY_SYSTEMS=true
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '1.5'
          memory: 3G

  # Enhanced Supply Chain Service
  supply-chain-service:
    build:
      context: .
      dockerfile: docker/services/supply-chain/Dockerfile
    ports:
      - "3017:3017"
    environment:
      - NODE_ENV=production
      - PORT=3017
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_supply
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - TRANSPORT_NETWORKS=enabled
      - STRATEGIC_RESERVES=true
      - ECONOMIC_WARFARE=enabled
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 12
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Enhanced Research Service
  research-service:
    build:
      context: .
      dockerfile: docker/services/research/Dockerfile
    ports:
      - "3018:3018"
    environment:
      - NODE_ENV=production
      - PORT=3018
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_research
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - TECHNOLOGY_TREES=advanced
      - INNOVATION_SIMULATION=true
      - REVERSE_ENGINEERING=enabled
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=startales_campaigns,startales_diplomacy,startales_characters,startales_supply,startales_research
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  postgres-military:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_military
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-military-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  postgres-psychic:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_psychic
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-psychic-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  postgres-ai:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-ai-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 12G

  postgres-narrative:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_narrative
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-narrative-data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  # Redis Services
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  redis-combat:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 8gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-combat-data:/data
    ports:
      - "6380:6379"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  # Enhanced NATS for high-throughput messaging
  nats:
    image: nats:alpine
    command: 
      - "--jetstream"
      - "--store_dir=/data"
      - "--max_memory_store=4GB"
      - "--max_file_store=50GB"
      - "--max_connections=10000"
    volumes:
      - nats-data:/data
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Enhanced ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      - CLICKHOUSE_DB=analytics
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./docker/clickhouse/config-expanded.xml:/etc/clickhouse-server/config.xml
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  # Enhanced Ollama with multiple models
  ollama:
    image: ollama/ollama:latest
    volumes:
      - ./docker/ollama/models:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 32G

  # Other infrastructure services remain the same...
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  consul:
    image: consul:latest
    command: agent -server -bootstrap-expect=1 -ui -bind=0.0.0.0 -client=0.0.0.0
    ports:
      - "8500:8500"
    networks:
      - startales-network
    restart: unless-stopped

  # Monitoring (enhanced for complex systems)
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus-expanded.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus-expanded.yml:/etc/prometheus/prometheus-expanded.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - startales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning-expanded:/etc/grafana/provisioning
      - ./docker/grafana/dashboards-expanded:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - startales-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - startales-network
    restart: unless-stopped
