# Real-Time Voice-Driven Galactic Strategy Game
# Supports continuous simulation, voice commands, and real-time progression
version: '3.8'

networks:
  startales-realtime:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres-data:
  postgres-simulation-data:
  postgres-voice-data:
  redis-realtime-data:
  redis-voice-cache-data:
  redis-progression-data:
  kafka-data:
  clickhouse-data:
  minio-data:
  prometheus-data:
  grafana-data:

services:
  # Load Balancer with WebRTC support
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
      - "3478:3478/udp"  # STUN/TURN for WebRTC
    volumes:
      - ./docker/nginx/nginx-realtime.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - voice-processing
    networks:
      - startales-realtime
    restart: unless-stopped

  # Core Services
  api-gateway:
    build:
      context: .
      dockerfile: docker/services/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - SIMULATION_SERVICE_URL=http://simulation-engine:3021
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis-realtime
      - kafka
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Voice Processing Service (New)
  voice-processing:
    build:
      context: .
      dockerfile: docker/services/voice-processing/Dockerfile
    ports:
      - "3020:3020"
      - "8080:8080"  # WebRTC signaling
    environment:
      - NODE_ENV=production
      - PORT=3020
      - WEBRTC_PORT=8080
      - REDIS_URL=redis://redis-voice-cache:6379
      - KAFKA_BROKERS=kafka:9092
      - STT_PROVIDER=whisper
      - TTS_PROVIDER=elevenlabs
      - NLU_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
      - VOICE_LATENCY_TARGET=200
      - MAX_CONCURRENT_STREAMS=1000
    depends_on:
      - redis-voice-cache
      - kafka
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 10
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Real-Time Simulation Engine (Enhanced)
  simulation-engine:
    build:
      context: .
      dockerfile: docker/services/simulation-engine/Dockerfile
    ports:
      - "3021:3021"
    environment:
      - NODE_ENV=production
      - PORT=3021
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-simulation:5432/startales_simulation
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - SIMULATION_FREQUENCY=10  # 10Hz tick rate
      - OFFLINE_ACCELERATION=60  # 60x speed when no players
      - ENABLE_CONTINUOUS_PROGRESSION=true
      - ENABLE_AI_DECISIONS=true
      - MAX_CONCURRENT_SIMULATIONS=100
    depends_on:
      - postgres-simulation
      - redis-realtime
      - kafka
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: '4.0'
          memory: 8G

  # Command Execution Service (New)
  command-execution:
    build:
      context: .
      dockerfile: docker/services/command-execution/Dockerfile
    ports:
      - "3022:3022"
    environment:
      - NODE_ENV=production
      - PORT=3022
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_commands
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - SIMULATION_SERVICE_URL=http://simulation-engine:3021
      - COMMAND_TIMEOUT=30000
      - MAX_QUEUE_SIZE=10000
      - ENABLE_VOICE_FEEDBACK=true
    depends_on:
      - postgres
      - redis-realtime
      - kafka
      - voice-processing
      - simulation-engine
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 8
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  # Progression Tracking Service (New)
  progression-tracking:
    build:
      context: .
      dockerfile: docker/services/progression-tracking/Dockerfile
    ports:
      - "3023:3023"
    environment:
      - NODE_ENV=production
      - PORT=3023
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_progression
      - REDIS_URL=redis://redis-progression:6379
      - KAFKA_BROKERS=kafka:9092
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - XP_CALCULATION_FREQUENCY=1  # 1Hz XP updates
      - ACHIEVEMENT_CHECK_FREQUENCY=0.1  # Every 10 seconds
      - ENABLE_VOICE_LEVELUP_ALERTS=true
    depends_on:
      - postgres
      - redis-progression
      - kafka
      - voice-processing
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '1.5'
          memory: 3G

  # Event Streaming Service (Enhanced)
  event-streaming:
    build:
      context: .
      dockerfile: docker/services/event-streaming/Dockerfile
    ports:
      - "3024:3024"
    environment:
      - NODE_ENV=production
      - PORT=3024
      - KAFKA_BROKERS=kafka:9092
      - REDIS_URL=redis://redis-realtime:6379
      - WEBSOCKET_PORT=3024
      - MAX_CONNECTIONS=50000
      - EVENT_BATCH_SIZE=100
      - EVENT_FLUSH_INTERVAL=100  # 100ms
      - ENABLE_PRIORITY_ROUTING=true
    depends_on:
      - kafka
      - redis-realtime
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 6
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Enhanced Military Service (Real-Time)
  military-service:
    build:
      context: .
      dockerfile: docker/services/military/Dockerfile
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_military
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - SIMULATION_SERVICE_URL=http://simulation-engine:3021
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - REALTIME_COMBAT=true
      - COMBAT_UPDATE_FREQUENCY=10  # 10Hz during battles
      - ENABLE_VOICE_COMMANDS=true
      - ENABLE_TACTICAL_AI=true
    depends_on:
      - postgres
      - redis-realtime
      - kafka
      - simulation-engine
      - voice-processing
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 15
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Enhanced Research Service (Continuous)
  research-service:
    build:
      context: .
      dockerfile: docker/services/research/Dockerfile
    ports:
      - "3018:3018"
    environment:
      - NODE_ENV=production
      - PORT=3018
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_research
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - CONTINUOUS_RESEARCH=true
      - RESEARCH_UPDATE_FREQUENCY=1  # 1Hz progress updates
      - BREAKTHROUGH_CHECK_FREQUENCY=0.1  # Every 10 seconds
      - ENABLE_VOICE_ALERTS=true
      - ENABLE_AI_COLLABORATION=true
    depends_on:
      - postgres
      - redis-realtime
      - kafka
      - voice-processing
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  # Enhanced Diplomatic Service (Live Negotiations)
  diplomatic-service:
    build:
      context: .
      dockerfile: docker/services/diplomatic/Dockerfile
    ports:
      - "3015:3015"
    environment:
      - NODE_ENV=production
      - PORT=3015
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/startales_diplomacy
      - REDIS_URL=redis://redis-realtime:6379
      - KAFKA_BROKERS=kafka:9092
      - VOICE_SERVICE_URL=http://voice-processing:3020
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LIVE_NEGOTIATIONS=true
      - AI_DIPLOMAT_PERSONALITIES=true
      - ENABLE_VOICE_DIPLOMACY=true
      - RELATIONSHIP_UPDATE_FREQUENCY=1  # 1Hz
    depends_on:
      - postgres
      - redis-realtime
      - kafka
      - voice-processing
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      replicas: 6
      resources:
        limits:
          cpus: '1.5'
          memory: 2G

  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=startales_commands,startales_progression,startales_military,startales_research,startales_diplomacy
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  postgres-simulation:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=startales_simulation
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-simulation-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  # Redis Services (Multiple for different purposes)
  redis-realtime:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 8gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-realtime-data:/data
    ports:
      - "6379:6379"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  redis-voice-cache:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-voice-cache-data:/data
    ports:
      - "6380:6379"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 4G

  redis-progression:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-progression-data:/data
    ports:
      - "6381:6379"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Apache Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - startales-realtime
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # ClickHouse for Analytics and Event Storage
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      - CLICKHOUSE_DB=analytics
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./docker/clickhouse/config-realtime.xml:/etc/clickhouse-server/config.xml
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G

  # MinIO for Asset Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus-realtime.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus-realtime.yml:/etc/prometheus/prometheus-realtime.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - startales-realtime
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning-realtime:/etc/grafana/provisioning
      - ./docker/grafana/dashboards-realtime:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - startales-realtime
    restart: unless-stopped

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - startales-realtime
    restart: unless-stopped
